// idl/hello/hello.proto
syntax = "proto3";

package api.product;

option go_package = "api/product";

import "api.proto";
import "category_api.proto";
import "brand_api.proto";
//import "common.proto";

message Product {
  int64 id = 1;
  string name = 2;
  string description = 3;
  string picture = 4;
  float price = 5;

  string category_name = 6;
  int64 stock=7;
  int64 sale=8;
  int64 publish_status=9;
  int64 category_id=10;
  int64 brand_id=11;
}

message ProductRequest {
  string product_name = 1 [(api.form)= "query"];
  int64 category_id=2 [(api.form)="categoryId"];
  int64 page=3 [(api.form)="page"];
  int64 page_size=4 [(api.form)="size"];
}

message ProductResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"'];
  string status_msg = 2;
  repeated Product products=3;//定义产品数组
}

message ProductInsertRequest {
  string name = 1 [(api.form)= "name"];
  string description = 2 [(api.form)= "description"];
  string picture = 3 [(api.form)= "picture"];
  float price = 4 [(api.form)= "price"];
  int64 stock = 5 [(api.form)= "stock"];
  int64 categoryId = 6 [(api.form)= "categoryId"];
  int64 brandId = 7 [(api.form)= "brandId"];
}
message ProductInsertResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"'];
  string status_msg = 2;
}

message ProductSelectRequest {
  int64 id = 1;
}
message ProductSelectResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"'];
  string status_msg = 2;
  Product product = 3;
}

message ProductDeleteRequest {
  int64 id = 1;
}

message ProductDeleteResponse {
  int32 status_code = 1[(api.go_tag) = 'json:"status_code"'];
  string status_msg = 2;
}
message ProductUpdateRequest {
  int64 id = 1[(api.form)= "id"];
  string name = 2[(api.form)= "name"];
  string description = 3[(api.form)= "description"];
  string picture = 4[(api.form)= "picture"];
  float price = 5[(api.form)= "price"];
  repeated string categories = 6[(api.form)= "categories"];
  int64 stock=7[(api.form)= "stock"];
  int64 sale=8[(api.form)= "sale"];
  int64 publish_status=9[(api.form)= "publish_status"];
  int64 category_id=10[(api.form)= "categoryId"];
  int64 brand_id=11[(api.form)= "brandId"];
}
message ProductSelectListRequest {
  repeated int64 id = 1[(api.form)= "ids"];
}
message ProductSelectListResponse {
  int32 status_code = 1[(api.go_tag) = 'json:"status_code"'];
  string status_msg = 2;
  repeated Product products = 3;
}
message ProductUpdateResponse {
  int32 status_code = 1[(api.go_tag) = 'json:"status_code"'];
  string status_msg = 2;
}

//锁库存
message ProductLockQuantity{
  int64 id = 1[(api.body)= "id"];
  int64 quantity = 2[(api.body)= "quantity"];
}
message ProductLockQuantityRequest {
  repeated ProductLockQuantity products = 1[(api.body)= "products"];
}
message ProductLockQuantityResponse {
  int32 status_code = 1[(api.go_tag) = 'json:"status_code"'];
  string status_msg = 2;
}

service ProductService {

  rpc Search(ProductRequest) returns (ProductResponse) {
    option (api.post) = "/product/search";
  }

  rpc ProductInsert(ProductInsertRequest) returns (ProductInsertResponse) {
    option (api.put) = "/product";
  }

  rpc ProductSelect(ProductSelectRequest) returns (ProductSelectResponse) {
    option (api.get) = "/product";
  }

  rpc ProductDelete(ProductDeleteRequest) returns (ProductDeleteResponse) {
    option (api.delete) = "/product";
  }

  rpc ProductUpdate(ProductUpdateRequest) returns (ProductUpdateResponse) {
    option (api.post) = "/product/update";
  }

  rpc ProductLockQuantity(ProductLockQuantityRequest) returns (ProductLockQuantityResponse) {
    option (api.post) = "/product/lockQuantity";
  }

  rpc ProductSelectList(ProductSelectListRequest) returns (ProductSelectListResponse) {
    option (api.post) = "/product/list";
  }

  /***************************************************************************/
  rpc CategorySelect (CategorySelectRequest) returns (CategorySelectResponse) {
    option (api.post) = "/category/select";
  }

  rpc CategoryInsert (CategoryInsertRequest) returns (CategoryInsertResponse) {
    option (api.post) = "/category/insert";
  }

  rpc CategoryDelete (CategoryDeleteRequest) returns (CategoryDeleteResponse) {
    option (api.post) = "/category/delete";
  }

  rpc CategoryUpdate (CategoryUpdateRequest) returns (CategoryUpdateResponse) {
    option (api.post) = "/category/update";
  }

  rpc Categories (CategoryRequest) returns (CategoryResponse) {
    option (api.post) = "/categories";
  }


  /***************************************************************************/
  rpc BrandSelect (BrandSelectRequest) returns (BrandSelectResponse) {
    option (api.post) = "/brand/select";
  }

  rpc BrandInsert (BrandInsertRequest) returns (BrandInsertResponse) {
    option (api.post) = "/brand/insert";
  }

  rpc BrandDelete (BrandDeleteRequest) returns (BrandDeleteResponse) {
    option (api.post) = "/brand/delete";
  }

  rpc BrandUpdate (BrandUpdateRequest) returns (BrandUpdateResponse) {
    option (api.post) = "/brand/update";
  }

}