syntax = "proto3";

package api.user;

option go_package = "api/user";

import "api.proto";

message LoginRequest {
  string username = 1 [(api.form) = "username"];
  string password = 2 [(api.form) = "password"];
}
message LoginResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"']; // 0-success, other values-failure
  string status_msg = 2;
  string access_token = 3;
  string refresh_token = 4;
}

message RegisterRequest {
  string username = 1 [(api.form)= "username"];
  string password = 2 [(api.form)= "password"];
  string confirm_password = 3 [(api.form)= "confirm_password"];
  string email = 4 [(api.form)= "email"];
  string description = 5 [(api.form)= "description"];
  int32 sex = 6 [(api.form)= "sex"];
  string avatar = 7 [(api.form)= "avatar"];
}

message RegisterResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"']; // 0-success, other values-failure
  string status_msg = 2;
}

message GetUserInfoResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"'];
  string status_msg = 2;
  string email = 3;
  string username = 4;
  string sex = 5;
  string description = 6;
  string avatar = 7;
  string created_at = 8;

}

message LogoutResponse {
  int32 status_code = 1[(api.go_tag)='json:"status_code"'];
  string status_msg = 2;
}

message Empty {}

service UserService {

  rpc Login(LoginRequest) returns (LoginResponse) {
    option (api.post) = "/user/login";
  }

  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (api.post) = "/user/register";
  }

  rpc GetUserInfo(Empty) returns (GetUserInfoResponse) {
    option (api.get) = "/user/info";
  }

  rpc RefreshToken(Empty) returns (LoginResponse) {
    option (api.post) = "/user/refresh_token";
  }

  rpc Logout(Empty) returns (LogoutResponse) {
    option (api.post) = "/user/logout";
  }
}