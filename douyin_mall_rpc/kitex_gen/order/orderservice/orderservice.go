// Code generated by Kitex v0.9.1. DO NOT EDIT.

package orderservice

import (
	"context"
	order "douyin_mall/rpc/kitex_gen/order"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"PlaceOrder": kitex.NewMethodInfo(
		placeOrderHandler,
		newPlaceOrderArgs,
		newPlaceOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"ListOrder": kitex.NewMethodInfo(
		listOrderHandler,
		newListOrderArgs,
		newListOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"MarkOrderPaid": kitex.NewMethodInfo(
		markOrderPaidHandler,
		newMarkOrderPaidArgs,
		newMarkOrderPaidResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetOrder": kitex.NewMethodInfo(
		getOrderHandler,
		newGetOrderArgs,
		newGetOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SearchOrders": kitex.NewMethodInfo(
		searchOrdersHandler,
		newSearchOrdersArgs,
		newSearchOrdersResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"InsertOrder": kitex.NewMethodInfo(
		insertOrderHandler,
		newInsertOrderArgs,
		newInsertOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"SelectOrder": kitex.NewMethodInfo(
		selectOrderHandler,
		newSelectOrderArgs,
		newSelectOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteOrder": kitex.NewMethodInfo(
		deleteOrderHandler,
		newDeleteOrderArgs,
		newDeleteOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"UpdateOrder": kitex.NewMethodInfo(
		updateOrderHandler,
		newUpdateOrderArgs,
		newUpdateOrderResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	orderServiceServiceInfo                = NewServiceInfo()
	orderServiceServiceInfoForClient       = NewServiceInfoForClient()
	orderServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return orderServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return orderServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "OrderService"
	handlerType := (*order.OrderService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "order",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func placeOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.PlaceOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).PlaceOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *PlaceOrderArgs:
		success, err := handler.(order.OrderService).PlaceOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PlaceOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newPlaceOrderArgs() interface{} {
	return &PlaceOrderArgs{}
}

func newPlaceOrderResult() interface{} {
	return &PlaceOrderResult{}
}

type PlaceOrderArgs struct {
	Req *order.PlaceOrderReq
}

func (p *PlaceOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.PlaceOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PlaceOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PlaceOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PlaceOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *PlaceOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.PlaceOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PlaceOrderArgs_Req_DEFAULT *order.PlaceOrderReq

func (p *PlaceOrderArgs) GetReq() *order.PlaceOrderReq {
	if !p.IsSetReq() {
		return PlaceOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PlaceOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PlaceOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type PlaceOrderResult struct {
	Success *order.PlaceOrderResp
}

var PlaceOrderResult_Success_DEFAULT *order.PlaceOrderResp

func (p *PlaceOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.PlaceOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PlaceOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PlaceOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PlaceOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *PlaceOrderResult) Unmarshal(in []byte) error {
	msg := new(order.PlaceOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PlaceOrderResult) GetSuccess() *order.PlaceOrderResp {
	if !p.IsSetSuccess() {
		return PlaceOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PlaceOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.PlaceOrderResp)
}

func (p *PlaceOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PlaceOrderResult) GetResult() interface{} {
	return p.Success
}

func listOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.ListOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).ListOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *ListOrderArgs:
		success, err := handler.(order.OrderService).ListOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newListOrderArgs() interface{} {
	return &ListOrderArgs{}
}

func newListOrderResult() interface{} {
	return &ListOrderResult{}
}

type ListOrderArgs struct {
	Req *order.ListOrderReq
}

func (p *ListOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.ListOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *ListOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.ListOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListOrderArgs_Req_DEFAULT *order.ListOrderReq

func (p *ListOrderArgs) GetReq() *order.ListOrderReq {
	if !p.IsSetReq() {
		return ListOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ListOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type ListOrderResult struct {
	Success *order.ListOrderResp
}

var ListOrderResult_Success_DEFAULT *order.ListOrderResp

func (p *ListOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.ListOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *ListOrderResult) Unmarshal(in []byte) error {
	msg := new(order.ListOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListOrderResult) GetSuccess() *order.ListOrderResp {
	if !p.IsSetSuccess() {
		return ListOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.ListOrderResp)
}

func (p *ListOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ListOrderResult) GetResult() interface{} {
	return p.Success
}

func markOrderPaidHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.MarkOrderPaidReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).MarkOrderPaid(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *MarkOrderPaidArgs:
		success, err := handler.(order.OrderService).MarkOrderPaid(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*MarkOrderPaidResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newMarkOrderPaidArgs() interface{} {
	return &MarkOrderPaidArgs{}
}

func newMarkOrderPaidResult() interface{} {
	return &MarkOrderPaidResult{}
}

type MarkOrderPaidArgs struct {
	Req *order.MarkOrderPaidReq
}

func (p *MarkOrderPaidArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.MarkOrderPaidReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *MarkOrderPaidArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *MarkOrderPaidArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *MarkOrderPaidArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *MarkOrderPaidArgs) Unmarshal(in []byte) error {
	msg := new(order.MarkOrderPaidReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var MarkOrderPaidArgs_Req_DEFAULT *order.MarkOrderPaidReq

func (p *MarkOrderPaidArgs) GetReq() *order.MarkOrderPaidReq {
	if !p.IsSetReq() {
		return MarkOrderPaidArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *MarkOrderPaidArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MarkOrderPaidArgs) GetFirstArgument() interface{} {
	return p.Req
}

type MarkOrderPaidResult struct {
	Success *order.MarkOrderPaidResp
}

var MarkOrderPaidResult_Success_DEFAULT *order.MarkOrderPaidResp

func (p *MarkOrderPaidResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.MarkOrderPaidResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *MarkOrderPaidResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *MarkOrderPaidResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *MarkOrderPaidResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *MarkOrderPaidResult) Unmarshal(in []byte) error {
	msg := new(order.MarkOrderPaidResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *MarkOrderPaidResult) GetSuccess() *order.MarkOrderPaidResp {
	if !p.IsSetSuccess() {
		return MarkOrderPaidResult_Success_DEFAULT
	}
	return p.Success
}

func (p *MarkOrderPaidResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.MarkOrderPaidResp)
}

func (p *MarkOrderPaidResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MarkOrderPaidResult) GetResult() interface{} {
	return p.Success
}

func getOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.GetOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).GetOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetOrderArgs:
		success, err := handler.(order.OrderService).GetOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetOrderArgs() interface{} {
	return &GetOrderArgs{}
}

func newGetOrderResult() interface{} {
	return &GetOrderResult{}
}

type GetOrderArgs struct {
	Req *order.GetOrderReq
}

func (p *GetOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.GetOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.GetOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetOrderArgs_Req_DEFAULT *order.GetOrderReq

func (p *GetOrderArgs) GetReq() *order.GetOrderReq {
	if !p.IsSetReq() {
		return GetOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetOrderResult struct {
	Success *order.GetOrderResp
}

var GetOrderResult_Success_DEFAULT *order.GetOrderResp

func (p *GetOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.GetOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetOrderResult) Unmarshal(in []byte) error {
	msg := new(order.GetOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetOrderResult) GetSuccess() *order.GetOrderResp {
	if !p.IsSetSuccess() {
		return GetOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.GetOrderResp)
}

func (p *GetOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetOrderResult) GetResult() interface{} {
	return p.Success
}

func searchOrdersHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.SearchOrdersReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).SearchOrders(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SearchOrdersArgs:
		success, err := handler.(order.OrderService).SearchOrders(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchOrdersResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSearchOrdersArgs() interface{} {
	return &SearchOrdersArgs{}
}

func newSearchOrdersResult() interface{} {
	return &SearchOrdersResult{}
}

type SearchOrdersArgs struct {
	Req *order.SearchOrdersReq
}

func (p *SearchOrdersArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.SearchOrdersReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchOrdersArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchOrdersArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchOrdersArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchOrdersArgs) Unmarshal(in []byte) error {
	msg := new(order.SearchOrdersReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchOrdersArgs_Req_DEFAULT *order.SearchOrdersReq

func (p *SearchOrdersArgs) GetReq() *order.SearchOrdersReq {
	if !p.IsSetReq() {
		return SearchOrdersArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchOrdersArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchOrdersArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchOrdersResult struct {
	Success *order.SearchOrdersResp
}

var SearchOrdersResult_Success_DEFAULT *order.SearchOrdersResp

func (p *SearchOrdersResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.SearchOrdersResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchOrdersResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchOrdersResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchOrdersResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchOrdersResult) Unmarshal(in []byte) error {
	msg := new(order.SearchOrdersResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchOrdersResult) GetSuccess() *order.SearchOrdersResp {
	if !p.IsSetSuccess() {
		return SearchOrdersResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchOrdersResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.SearchOrdersResp)
}

func (p *SearchOrdersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchOrdersResult) GetResult() interface{} {
	return p.Success
}

func insertOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.InsertOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).InsertOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *InsertOrderArgs:
		success, err := handler.(order.OrderService).InsertOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*InsertOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newInsertOrderArgs() interface{} {
	return &InsertOrderArgs{}
}

func newInsertOrderResult() interface{} {
	return &InsertOrderResult{}
}

type InsertOrderArgs struct {
	Req *order.InsertOrderReq
}

func (p *InsertOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.InsertOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *InsertOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *InsertOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *InsertOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *InsertOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.InsertOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var InsertOrderArgs_Req_DEFAULT *order.InsertOrderReq

func (p *InsertOrderArgs) GetReq() *order.InsertOrderReq {
	if !p.IsSetReq() {
		return InsertOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *InsertOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *InsertOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type InsertOrderResult struct {
	Success *order.InsertOrderResp
}

var InsertOrderResult_Success_DEFAULT *order.InsertOrderResp

func (p *InsertOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.InsertOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *InsertOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *InsertOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *InsertOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *InsertOrderResult) Unmarshal(in []byte) error {
	msg := new(order.InsertOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *InsertOrderResult) GetSuccess() *order.InsertOrderResp {
	if !p.IsSetSuccess() {
		return InsertOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *InsertOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.InsertOrderResp)
}

func (p *InsertOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *InsertOrderResult) GetResult() interface{} {
	return p.Success
}

func selectOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.SelectOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).SelectOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SelectOrderArgs:
		success, err := handler.(order.OrderService).SelectOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SelectOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSelectOrderArgs() interface{} {
	return &SelectOrderArgs{}
}

func newSelectOrderResult() interface{} {
	return &SelectOrderResult{}
}

type SelectOrderArgs struct {
	Req *order.SelectOrderReq
}

func (p *SelectOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.SelectOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SelectOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SelectOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SelectOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SelectOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.SelectOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SelectOrderArgs_Req_DEFAULT *order.SelectOrderReq

func (p *SelectOrderArgs) GetReq() *order.SelectOrderReq {
	if !p.IsSetReq() {
		return SelectOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SelectOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SelectOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SelectOrderResult struct {
	Success *order.SelectOrderResp
}

var SelectOrderResult_Success_DEFAULT *order.SelectOrderResp

func (p *SelectOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.SelectOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SelectOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SelectOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SelectOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SelectOrderResult) Unmarshal(in []byte) error {
	msg := new(order.SelectOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SelectOrderResult) GetSuccess() *order.SelectOrderResp {
	if !p.IsSetSuccess() {
		return SelectOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SelectOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.SelectOrderResp)
}

func (p *SelectOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SelectOrderResult) GetResult() interface{} {
	return p.Success
}

func deleteOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.DeleteOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).DeleteOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteOrderArgs:
		success, err := handler.(order.OrderService).DeleteOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteOrderArgs() interface{} {
	return &DeleteOrderArgs{}
}

func newDeleteOrderResult() interface{} {
	return &DeleteOrderResult{}
}

type DeleteOrderArgs struct {
	Req *order.DeleteOrderReq
}

func (p *DeleteOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.DeleteOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.DeleteOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteOrderArgs_Req_DEFAULT *order.DeleteOrderReq

func (p *DeleteOrderArgs) GetReq() *order.DeleteOrderReq {
	if !p.IsSetReq() {
		return DeleteOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteOrderResult struct {
	Success *order.DeleteOrderResp
}

var DeleteOrderResult_Success_DEFAULT *order.DeleteOrderResp

func (p *DeleteOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.DeleteOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteOrderResult) Unmarshal(in []byte) error {
	msg := new(order.DeleteOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteOrderResult) GetSuccess() *order.DeleteOrderResp {
	if !p.IsSetSuccess() {
		return DeleteOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.DeleteOrderResp)
}

func (p *DeleteOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteOrderResult) GetResult() interface{} {
	return p.Success
}

func updateOrderHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(order.UpdateOrderReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(order.OrderService).UpdateOrder(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *UpdateOrderArgs:
		success, err := handler.(order.OrderService).UpdateOrder(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UpdateOrderResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newUpdateOrderArgs() interface{} {
	return &UpdateOrderArgs{}
}

func newUpdateOrderResult() interface{} {
	return &UpdateOrderResult{}
}

type UpdateOrderArgs struct {
	Req *order.UpdateOrderReq
}

func (p *UpdateOrderArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(order.UpdateOrderReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateOrderArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateOrderArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateOrderArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateOrderArgs) Unmarshal(in []byte) error {
	msg := new(order.UpdateOrderReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UpdateOrderArgs_Req_DEFAULT *order.UpdateOrderReq

func (p *UpdateOrderArgs) GetReq() *order.UpdateOrderReq {
	if !p.IsSetReq() {
		return UpdateOrderArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateOrderArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UpdateOrderResult struct {
	Success *order.UpdateOrderResp
}

var UpdateOrderResult_Success_DEFAULT *order.UpdateOrderResp

func (p *UpdateOrderResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(order.UpdateOrderResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateOrderResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateOrderResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateOrderResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateOrderResult) Unmarshal(in []byte) error {
	msg := new(order.UpdateOrderResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateOrderResult) GetSuccess() *order.UpdateOrderResp {
	if !p.IsSetSuccess() {
		return UpdateOrderResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*order.UpdateOrderResp)
}

func (p *UpdateOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateOrderResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PlaceOrder(ctx context.Context, Req *order.PlaceOrderReq) (r *order.PlaceOrderResp, err error) {
	var _args PlaceOrderArgs
	_args.Req = Req
	var _result PlaceOrderResult
	if err = p.c.Call(ctx, "PlaceOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListOrder(ctx context.Context, Req *order.ListOrderReq) (r *order.ListOrderResp, err error) {
	var _args ListOrderArgs
	_args.Req = Req
	var _result ListOrderResult
	if err = p.c.Call(ctx, "ListOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MarkOrderPaid(ctx context.Context, Req *order.MarkOrderPaidReq) (r *order.MarkOrderPaidResp, err error) {
	var _args MarkOrderPaidArgs
	_args.Req = Req
	var _result MarkOrderPaidResult
	if err = p.c.Call(ctx, "MarkOrderPaid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOrder(ctx context.Context, Req *order.GetOrderReq) (r *order.GetOrderResp, err error) {
	var _args GetOrderArgs
	_args.Req = Req
	var _result GetOrderResult
	if err = p.c.Call(ctx, "GetOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchOrders(ctx context.Context, Req *order.SearchOrdersReq) (r *order.SearchOrdersResp, err error) {
	var _args SearchOrdersArgs
	_args.Req = Req
	var _result SearchOrdersResult
	if err = p.c.Call(ctx, "SearchOrders", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InsertOrder(ctx context.Context, Req *order.InsertOrderReq) (r *order.InsertOrderResp, err error) {
	var _args InsertOrderArgs
	_args.Req = Req
	var _result InsertOrderResult
	if err = p.c.Call(ctx, "InsertOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SelectOrder(ctx context.Context, Req *order.SelectOrderReq) (r *order.SelectOrderResp, err error) {
	var _args SelectOrderArgs
	_args.Req = Req
	var _result SelectOrderResult
	if err = p.c.Call(ctx, "SelectOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteOrder(ctx context.Context, Req *order.DeleteOrderReq) (r *order.DeleteOrderResp, err error) {
	var _args DeleteOrderArgs
	_args.Req = Req
	var _result DeleteOrderResult
	if err = p.c.Call(ctx, "DeleteOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateOrder(ctx context.Context, Req *order.UpdateOrderReq) (r *order.UpdateOrderResp, err error) {
	var _args UpdateOrderArgs
	_args.Req = Req
	var _result UpdateOrderResult
	if err = p.c.Call(ctx, "UpdateOrder", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
