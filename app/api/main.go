// Code generated by hertz generator.

package main

import (
	"context"
	"douyin_mall/api/biz/middleware"
	"douyin_mall/api/infra/rpc"
	"douyin_mall/api/mtl/log"
	"douyin_mall/common/mtl"
	"douyin_mall/common/utils/env"
	"douyin_mall/common/utils/feishu"
	"fmt"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/kitex/pkg/klog"
	"os"
	"time"

	"douyin_mall/api/biz/router"
	"douyin_mall/api/conf"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	"github.com/hertz-contrib/obs-opentelemetry/provider"
	hertztracing "github.com/hertz-contrib/obs-opentelemetry/tracing"
	"github.com/hertz-contrib/pprof"
)

var ServiceName string

func main() {
	os.Setenv("TZ", "Asia/Shanghai")
	time.Local, _ = time.LoadLocation("")

	ServiceName = conf.GetConf().Hertz.Service
	p := provider.NewOpenTelemetryProvider(
		provider.WithEnableMetrics(false),
		provider.WithServiceName(ServiceName),
		provider.WithExportEndpoint(conf.GetConf().Jaeger.Endpoint),
		provider.WithInsecure(),
	)
	defer p.Shutdown(context.Background())
	tracer, cfg := hertztracing.NewServerTracer()

	registry, registryInfo := mtl.InitMetrics(ServiceName, conf.GetConf().Hertz.MetricsPort)
	defer registry.Deregister(registryInfo)

	rpc.InitClient()

	var address string
	if currentEnv, err := env.GetString("env"); err == nil && currentEnv == "prod" {
		address = "0.0.0.0:8888"
	} else {
		address = conf.GetConf().Hertz.Address
	}
	h := server.New(server.WithHostPorts(address), tracer)
	log.InitLog(ServiceName,
		conf.LogLevel(), conf.GetConf().Hertz.LogFileName, conf.GetConf().Hertz.LogMaxSize, conf.GetConf().Hertz.LogMaxBackups, conf.GetConf().Hertz.LogMaxAge,
		h,
		conf.GetConf().Kafka.ClsKafka.Usser, conf.GetConf().Kafka.ClsKafka.Password, conf.GetConf().Kafka.ClsKafka.TopicId)
	h.Use(hertztracing.ServerMiddleware(cfg))
	h.Use(middleware.TraceLogMiddleware())
	h.Use(middleware.AuthorizationMiddleware())

	registerMiddleware(h)

	// add a ping route to test
	h.GET("/ping", func(c context.Context, ctx *app.RequestContext) {
		ctx.JSON(consts.StatusOK, utils.H{"ping": "pong"})
	})

	router.GeneratedRegister(h)

	h.Spin()
}

func registerMiddleware(h *server.Hertz) {

	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery(recovery.WithRecoveryHandler(FeishuAlertRecoveryHandler)))

	// cores
	h.Use(cors.Default())
}

func FeishuAlertRecoveryHandler(ctx context.Context, c *app.RequestContext, err interface{}, stack []byte) {
	currentEnv, getEnvErr := env.GetString("env")
	if getEnvErr != nil {
		klog.CtxErrorf(ctx, getEnvErr.Error())
	} else if currentEnv != "dev" {
		errMsg := fmt.Sprintf("接口%s发生错误：\nerr=%v\nstack=%s", c.Request.Path(), err, stack)
		feishu.SendFeishuAlert(ctx, conf.GetConf().Alert.FeishuWebhook, errMsg)
	} else {
		// dev环境打印日志
		hlog.CtxErrorf(ctx, "接口%s发生错误：\nerr=%v\nstack=%s", c.Request.Path(), err, stack)
	}
	c.AbortWithStatusJSON(500, utils.H{"code": 500, "message": "Internal Server Error"})
}
